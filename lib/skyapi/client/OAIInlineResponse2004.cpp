/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200_4.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAIInline_response_200_4::OAIInline_response_200_4(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200_4::OAIInline_response_200_4() {
    this->init();
}

OAIInline_response_200_4::~OAIInline_response_200_4() {

}

void
OAIInline_response_200_4::init() {
    m_announced_isSet = false;
    m_announced_isValid = false;
    m_is_valid_isSet = false;
    m_is_valid_isValid = false;
    m_checked_isSet = false;
    m_checked_isValid = false;
    m_received_isSet = false;
    m_received_isValid = false;
    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void
OAIInline_response_200_4::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200_4::fromJsonObject(QJsonObject json) {
    m_announced_isValid = ::skyqt::fromJsonValue(announced, json[QString("announced")]);
    
    m_is_valid_isValid = ::skyqt::fromJsonValue(is_valid, json[QString("is_valid")]);
    
    m_checked_isValid = ::skyqt::fromJsonValue(checked, json[QString("checked")]);
    
    m_received_isValid = ::skyqt::fromJsonValue(received, json[QString("received")]);
    
    m_transaction_isValid = ::skyqt::fromJsonValue(transaction, json[QString("transaction")]);
    
}

QString
OAIInline_response_200_4::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200_4::asJsonObject() const {
    QJsonObject obj;
	if(m_announced_isSet){
        obj.insert(QString("announced"), ::skyqt::toJsonValue(announced));
    }
	if(m_is_valid_isSet){
        obj.insert(QString("is_valid"), ::skyqt::toJsonValue(is_valid));
    }
	if(m_checked_isSet){
        obj.insert(QString("checked"), ::skyqt::toJsonValue(checked));
    }
	if(m_received_isSet){
        obj.insert(QString("received"), ::skyqt::toJsonValue(received));
    }
	if(transaction.isSet()){
        obj.insert(QString("transaction"), ::skyqt::toJsonValue(transaction));
    }
    return obj;
}

QString
OAIInline_response_200_4::getAnnounced() const {
    return announced;
}
void
OAIInline_response_200_4::setAnnounced(const QString &announced) {
    this->announced = announced;
    this->m_announced_isSet = true;
}

bool
OAIInline_response_200_4::isIsValid() const {
    return is_valid;
}
void
OAIInline_response_200_4::setIsValid(const bool &is_valid) {
    this->is_valid = is_valid;
    this->m_is_valid_isSet = true;
}

QString
OAIInline_response_200_4::getChecked() const {
    return checked;
}
void
OAIInline_response_200_4::setChecked(const QString &checked) {
    this->checked = checked;
    this->m_checked_isSet = true;
}

QString
OAIInline_response_200_4::getReceived() const {
    return received;
}
void
OAIInline_response_200_4::setReceived(const QString &received) {
    this->received = received;
    this->m_received_isSet = true;
}

OAI_api_v1_pendingTxs_transaction
OAIInline_response_200_4::getTransaction() const {
    return transaction;
}
void
OAIInline_response_200_4::setTransaction(const OAI_api_v1_pendingTxs_transaction &transaction) {
    this->transaction = transaction;
    this->m_transaction_isSet = true;
}

bool
OAIInline_response_200_4::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_announced_isSet){ isObjectUpdated = true; break;}
    
        if(m_is_valid_isSet){ isObjectUpdated = true; break;}
    
        if(m_checked_isSet){ isObjectUpdated = true; break;}
    
        if(m_received_isSet){ isObjectUpdated = true; break;}
    
        if(transaction.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200_4::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

