/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200_3_unconfirmed_verify_transaction.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAIInline_response_200_3_unconfirmed_verify_transaction::OAIInline_response_200_3_unconfirmed_verify_transaction(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200_3_unconfirmed_verify_transaction::OAIInline_response_200_3_unconfirmed_verify_transaction() {
    this->init();
}

OAIInline_response_200_3_unconfirmed_verify_transaction::~OAIInline_response_200_3_unconfirmed_verify_transaction() {

}

void
OAIInline_response_200_3_unconfirmed_verify_transaction::init() {
    m_burn_factor_isSet = false;
    m_burn_factor_isValid = false;
    m_max_transaction_size_isSet = false;
    m_max_transaction_size_isValid = false;
    m_max_decimals_isSet = false;
    m_max_decimals_isValid = false;
}

void
OAIInline_response_200_3_unconfirmed_verify_transaction::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200_3_unconfirmed_verify_transaction::fromJsonObject(QJsonObject json) {
    m_burn_factor_isValid = ::skyqt::fromJsonValue(burn_factor, json[QString("burn_factor")]);
    
    m_max_transaction_size_isValid = ::skyqt::fromJsonValue(max_transaction_size, json[QString("max_transaction_size")]);
    
    m_max_decimals_isValid = ::skyqt::fromJsonValue(max_decimals, json[QString("max_decimals")]);
    
}

QString
OAIInline_response_200_3_unconfirmed_verify_transaction::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200_3_unconfirmed_verify_transaction::asJsonObject() const {
    QJsonObject obj;
	if(m_burn_factor_isSet){
        obj.insert(QString("burn_factor"), ::skyqt::toJsonValue(burn_factor));
    }
	if(m_max_transaction_size_isSet){
        obj.insert(QString("max_transaction_size"), ::skyqt::toJsonValue(max_transaction_size));
    }
	if(m_max_decimals_isSet){
        obj.insert(QString("max_decimals"), ::skyqt::toJsonValue(max_decimals));
    }
    return obj;
}

qint32
OAIInline_response_200_3_unconfirmed_verify_transaction::getBurnFactor() const {
    return burn_factor;
}
void
OAIInline_response_200_3_unconfirmed_verify_transaction::setBurnFactor(const qint32 &burn_factor) {
    this->burn_factor = burn_factor;
    this->m_burn_factor_isSet = true;
}

qint32
OAIInline_response_200_3_unconfirmed_verify_transaction::getMaxTransactionSize() const {
    return max_transaction_size;
}
void
OAIInline_response_200_3_unconfirmed_verify_transaction::setMaxTransactionSize(const qint32 &max_transaction_size) {
    this->max_transaction_size = max_transaction_size;
    this->m_max_transaction_size_isSet = true;
}

qint32
OAIInline_response_200_3_unconfirmed_verify_transaction::getMaxDecimals() const {
    return max_decimals;
}
void
OAIInline_response_200_3_unconfirmed_verify_transaction::setMaxDecimals(const qint32 &max_decimals) {
    this->max_decimals = max_decimals;
    this->m_max_decimals_isSet = true;
}

bool
OAIInline_response_200_3_unconfirmed_verify_transaction::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_burn_factor_isSet){ isObjectUpdated = true; break;}
    
        if(m_max_transaction_size_isSet){ isObjectUpdated = true; break;}
    
        if(m_max_decimals_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200_3_unconfirmed_verify_transaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

