/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAI_api_v1_wallets_meta.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAI_api_v1_wallets_meta::OAI_api_v1_wallets_meta(QString json) {
    this->init();
    this->fromJson(json);
}

OAI_api_v1_wallets_meta::OAI_api_v1_wallets_meta() {
    this->init();
}

OAI_api_v1_wallets_meta::~OAI_api_v1_wallets_meta() {

}

void
OAI_api_v1_wallets_meta::init() {
    m_filename_isSet = false;
    m_filename_isValid = false;
    m_encrypted_isSet = false;
    m_encrypted_isValid = false;
    m_crypto_type_isSet = false;
    m_crypto_type_isValid = false;
    m_label_isSet = false;
    m_label_isValid = false;
    m_type_isSet = false;
    m_type_isValid = false;
    m_version_isSet = false;
    m_version_isValid = false;
    m_coin_isSet = false;
    m_coin_isValid = false;
    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void
OAI_api_v1_wallets_meta::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAI_api_v1_wallets_meta::fromJsonObject(QJsonObject json) {
    m_filename_isValid = ::skyqt::fromJsonValue(filename, json[QString("filename")]);
    
    m_encrypted_isValid = ::skyqt::fromJsonValue(encrypted, json[QString("encrypted")]);
    
    m_crypto_type_isValid = ::skyqt::fromJsonValue(crypto_type, json[QString("crypto_type")]);
    
    m_label_isValid = ::skyqt::fromJsonValue(label, json[QString("label")]);
    
    m_type_isValid = ::skyqt::fromJsonValue(type, json[QString("type")]);
    
    m_version_isValid = ::skyqt::fromJsonValue(version, json[QString("version")]);
    
    m_coin_isValid = ::skyqt::fromJsonValue(coin, json[QString("coin")]);
    
    m_timestamp_isValid = ::skyqt::fromJsonValue(timestamp, json[QString("timestamp")]);
    
}

QString
OAI_api_v1_wallets_meta::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAI_api_v1_wallets_meta::asJsonObject() const {
    QJsonObject obj;
	if(m_filename_isSet){
        obj.insert(QString("filename"), ::skyqt::toJsonValue(filename));
    }
	if(m_encrypted_isSet){
        obj.insert(QString("encrypted"), ::skyqt::toJsonValue(encrypted));
    }
	if(m_crypto_type_isSet){
        obj.insert(QString("crypto_type"), ::skyqt::toJsonValue(crypto_type));
    }
	if(m_label_isSet){
        obj.insert(QString("label"), ::skyqt::toJsonValue(label));
    }
	if(m_type_isSet){
        obj.insert(QString("type"), ::skyqt::toJsonValue(type));
    }
	if(m_version_isSet){
        obj.insert(QString("version"), ::skyqt::toJsonValue(version));
    }
	if(m_coin_isSet){
        obj.insert(QString("coin"), ::skyqt::toJsonValue(coin));
    }
	if(m_timestamp_isSet){
        obj.insert(QString("timestamp"), ::skyqt::toJsonValue(timestamp));
    }
    return obj;
}

QString
OAI_api_v1_wallets_meta::getFilename() const {
    return filename;
}
void
OAI_api_v1_wallets_meta::setFilename(const QString &filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

bool
OAI_api_v1_wallets_meta::isEncrypted() const {
    return encrypted;
}
void
OAI_api_v1_wallets_meta::setEncrypted(const bool &encrypted) {
    this->encrypted = encrypted;
    this->m_encrypted_isSet = true;
}

QString
OAI_api_v1_wallets_meta::getCryptoType() const {
    return crypto_type;
}
void
OAI_api_v1_wallets_meta::setCryptoType(const QString &crypto_type) {
    this->crypto_type = crypto_type;
    this->m_crypto_type_isSet = true;
}

QString
OAI_api_v1_wallets_meta::getLabel() const {
    return label;
}
void
OAI_api_v1_wallets_meta::setLabel(const QString &label) {
    this->label = label;
    this->m_label_isSet = true;
}

QString
OAI_api_v1_wallets_meta::getType() const {
    return type;
}
void
OAI_api_v1_wallets_meta::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString
OAI_api_v1_wallets_meta::getVersion() const {
    return version;
}
void
OAI_api_v1_wallets_meta::setVersion(const QString &version) {
    this->version = version;
    this->m_version_isSet = true;
}

QString
OAI_api_v1_wallets_meta::getCoin() const {
    return coin;
}
void
OAI_api_v1_wallets_meta::setCoin(const QString &coin) {
    this->coin = coin;
    this->m_coin_isSet = true;
}

qint32
OAI_api_v1_wallets_meta::getTimestamp() const {
    return timestamp;
}
void
OAI_api_v1_wallets_meta::setTimestamp(const qint32 &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

bool
OAI_api_v1_wallets_meta::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_filename_isSet){ isObjectUpdated = true; break;}
    
        if(m_encrypted_isSet){ isObjectUpdated = true; break;}
    
        if(m_crypto_type_isSet){ isObjectUpdated = true; break;}
    
        if(m_label_isSet){ isObjectUpdated = true; break;}
    
        if(m_type_isSet){ isObjectUpdated = true; break;}
    
        if(m_version_isSet){ isObjectUpdated = true; break;}
    
        if(m_coin_isSet){ isObjectUpdated = true; break;}
    
        if(m_timestamp_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAI_api_v1_wallets_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

