/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAIInline_response_200::OAIInline_response_200(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200::OAIInline_response_200() {
    this->init();
}

OAIInline_response_200::~OAIInline_response_200() {

}

void
OAIInline_response_200::init() {
    m_hours_isSet = false;
    m_hours_isValid = false;
    m_coins_isSet = false;
    m_coins_isValid = false;
    m_uxid_isSet = false;
    m_uxid_isValid = false;
    m_owner_address_isSet = false;
    m_owner_address_isValid = false;
    m_spent_block_seq_isSet = false;
    m_spent_block_seq_isValid = false;
    m_spent_tx_isSet = false;
    m_spent_tx_isValid = false;
    m_time_isSet = false;
    m_time_isValid = false;
    m_src_block_seq_isSet = false;
    m_src_block_seq_isValid = false;
    m_src_tx_isSet = false;
    m_src_tx_isValid = false;
}

void
OAIInline_response_200::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200::fromJsonObject(QJsonObject json) {
    m_hours_isValid = ::skyqt::fromJsonValue(hours, json[QString("hours")]);
    
    m_coins_isValid = ::skyqt::fromJsonValue(coins, json[QString("coins")]);
    
    m_uxid_isValid = ::skyqt::fromJsonValue(uxid, json[QString("uxid")]);
    
    m_owner_address_isValid = ::skyqt::fromJsonValue(owner_address, json[QString("owner_address")]);
    
    m_spent_block_seq_isValid = ::skyqt::fromJsonValue(spent_block_seq, json[QString("spent_block_seq")]);
    
    m_spent_tx_isValid = ::skyqt::fromJsonValue(spent_tx, json[QString("spent_tx")]);
    
    m_time_isValid = ::skyqt::fromJsonValue(time, json[QString("time")]);
    
    m_src_block_seq_isValid = ::skyqt::fromJsonValue(src_block_seq, json[QString("src_block_seq")]);
    
    m_src_tx_isValid = ::skyqt::fromJsonValue(src_tx, json[QString("src_tx")]);
    
}

QString
OAIInline_response_200::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200::asJsonObject() const {
    QJsonObject obj;
	if(m_hours_isSet){
        obj.insert(QString("hours"), ::skyqt::toJsonValue(hours));
    }
	if(m_coins_isSet){
        obj.insert(QString("coins"), ::skyqt::toJsonValue(coins));
    }
	if(m_uxid_isSet){
        obj.insert(QString("uxid"), ::skyqt::toJsonValue(uxid));
    }
	if(m_owner_address_isSet){
        obj.insert(QString("owner_address"), ::skyqt::toJsonValue(owner_address));
    }
	if(m_spent_block_seq_isSet){
        obj.insert(QString("spent_block_seq"), ::skyqt::toJsonValue(spent_block_seq));
    }
	if(m_spent_tx_isSet){
        obj.insert(QString("spent_tx"), ::skyqt::toJsonValue(spent_tx));
    }
	if(m_time_isSet){
        obj.insert(QString("time"), ::skyqt::toJsonValue(time));
    }
	if(m_src_block_seq_isSet){
        obj.insert(QString("src_block_seq"), ::skyqt::toJsonValue(src_block_seq));
    }
	if(m_src_tx_isSet){
        obj.insert(QString("src_tx"), ::skyqt::toJsonValue(src_tx));
    }
    return obj;
}

qint64
OAIInline_response_200::getHours() const {
    return hours;
}
void
OAIInline_response_200::setHours(const qint64 &hours) {
    this->hours = hours;
    this->m_hours_isSet = true;
}

qint32
OAIInline_response_200::getCoins() const {
    return coins;
}
void
OAIInline_response_200::setCoins(const qint32 &coins) {
    this->coins = coins;
    this->m_coins_isSet = true;
}

QString
OAIInline_response_200::getUxid() const {
    return uxid;
}
void
OAIInline_response_200::setUxid(const QString &uxid) {
    this->uxid = uxid;
    this->m_uxid_isSet = true;
}

QString
OAIInline_response_200::getOwnerAddress() const {
    return owner_address;
}
void
OAIInline_response_200::setOwnerAddress(const QString &owner_address) {
    this->owner_address = owner_address;
    this->m_owner_address_isSet = true;
}

qint32
OAIInline_response_200::getSpentBlockSeq() const {
    return spent_block_seq;
}
void
OAIInline_response_200::setSpentBlockSeq(const qint32 &spent_block_seq) {
    this->spent_block_seq = spent_block_seq;
    this->m_spent_block_seq_isSet = true;
}

QString
OAIInline_response_200::getSpentTx() const {
    return spent_tx;
}
void
OAIInline_response_200::setSpentTx(const QString &spent_tx) {
    this->spent_tx = spent_tx;
    this->m_spent_tx_isSet = true;
}

qint64
OAIInline_response_200::getTime() const {
    return time;
}
void
OAIInline_response_200::setTime(const qint64 &time) {
    this->time = time;
    this->m_time_isSet = true;
}

qint64
OAIInline_response_200::getSrcBlockSeq() const {
    return src_block_seq;
}
void
OAIInline_response_200::setSrcBlockSeq(const qint64 &src_block_seq) {
    this->src_block_seq = src_block_seq;
    this->m_src_block_seq_isSet = true;
}

QString
OAIInline_response_200::getSrcTx() const {
    return src_tx;
}
void
OAIInline_response_200::setSrcTx(const QString &src_tx) {
    this->src_tx = src_tx;
    this->m_src_tx_isSet = true;
}

bool
OAIInline_response_200::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_hours_isSet){ isObjectUpdated = true; break;}
    
        if(m_coins_isSet){ isObjectUpdated = true; break;}
    
        if(m_uxid_isSet){ isObjectUpdated = true; break;}
    
        if(m_owner_address_isSet){ isObjectUpdated = true; break;}
    
        if(m_spent_block_seq_isSet){ isObjectUpdated = true; break;}
    
        if(m_spent_tx_isSet){ isObjectUpdated = true; break;}
    
        if(m_time_isSet){ isObjectUpdated = true; break;}
    
        if(m_src_block_seq_isSet){ isObjectUpdated = true; break;}
    
        if(m_src_tx_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

