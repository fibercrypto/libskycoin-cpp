/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200_2.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAIInline_response_200_2::OAIInline_response_200_2(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200_2::OAIInline_response_200_2() {
    this->init();
}

OAIInline_response_200_2::~OAIInline_response_200_2() {

}

void
OAIInline_response_200_2::init() {
    m_outputs_isSet = false;
    m_outputs_isValid = false;
    m_inner_hash_isSet = false;
    m_inner_hash_isValid = false;
    m_inputs_isSet = false;
    m_inputs_isValid = false;
    m_fee_isSet = false;
    m_fee_isValid = false;
    m_sigs_isSet = false;
    m_sigs_isValid = false;
    m_length_isSet = false;
    m_length_isValid = false;
    m_txid_isSet = false;
    m_txid_isValid = false;
    m_type_isSet = false;
    m_type_isValid = false;
    m_status_isSet = false;
    m_status_isValid = false;
    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void
OAIInline_response_200_2::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200_2::fromJsonObject(QJsonObject json) {
    
    m_outputs_isValid = ::skyqt::fromJsonValue(outputs, json[QString("outputs")]);
    m_inner_hash_isValid = ::skyqt::fromJsonValue(inner_hash, json[QString("inner_hash")]);
    
    
    m_inputs_isValid = ::skyqt::fromJsonValue(inputs, json[QString("inputs")]);
    m_fee_isValid = ::skyqt::fromJsonValue(fee, json[QString("fee")]);
    
    
    m_sigs_isValid = ::skyqt::fromJsonValue(sigs, json[QString("sigs")]);
    m_length_isValid = ::skyqt::fromJsonValue(length, json[QString("length")]);
    
    m_txid_isValid = ::skyqt::fromJsonValue(txid, json[QString("txid")]);
    
    m_type_isValid = ::skyqt::fromJsonValue(type, json[QString("type")]);
    
    m_status_isValid = ::skyqt::fromJsonValue(status, json[QString("status")]);
    
    m_timestamp_isValid = ::skyqt::fromJsonValue(timestamp, json[QString("timestamp")]);
    
}

QString
OAIInline_response_200_2::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200_2::asJsonObject() const {
    QJsonObject obj;
	
    if(outputs.size() > 0){
        obj.insert(QString("outputs"), ::skyqt::toJsonValue(outputs));
    } 
	if(m_inner_hash_isSet){
        obj.insert(QString("inner_hash"), ::skyqt::toJsonValue(inner_hash));
    }
	
    if(inputs.size() > 0){
        obj.insert(QString("inputs"), ::skyqt::toJsonValue(inputs));
    } 
	if(m_fee_isSet){
        obj.insert(QString("fee"), ::skyqt::toJsonValue(fee));
    }
	
    if(sigs.size() > 0){
        obj.insert(QString("sigs"), ::skyqt::toJsonValue(sigs));
    } 
	if(m_length_isSet){
        obj.insert(QString("length"), ::skyqt::toJsonValue(length));
    }
	if(m_txid_isSet){
        obj.insert(QString("txid"), ::skyqt::toJsonValue(txid));
    }
	if(m_type_isSet){
        obj.insert(QString("type"), ::skyqt::toJsonValue(type));
    }
	if(status.isSet()){
        obj.insert(QString("status"), ::skyqt::toJsonValue(status));
    }
	if(m_timestamp_isSet){
        obj.insert(QString("timestamp"), ::skyqt::toJsonValue(timestamp));
    }
    return obj;
}

QList<OAI_api_v1_explorer_address_outputs>
OAIInline_response_200_2::getOutputs() const {
    return outputs;
}
void
OAIInline_response_200_2::setOutputs(const QList<OAI_api_v1_explorer_address_outputs> &outputs) {
    this->outputs = outputs;
    this->m_outputs_isSet = true;
}

QString
OAIInline_response_200_2::getInnerHash() const {
    return inner_hash;
}
void
OAIInline_response_200_2::setInnerHash(const QString &inner_hash) {
    this->inner_hash = inner_hash;
    this->m_inner_hash_isSet = true;
}

QList<OAI_api_v1_explorer_address_inputs>
OAIInline_response_200_2::getInputs() const {
    return inputs;
}
void
OAIInline_response_200_2::setInputs(const QList<OAI_api_v1_explorer_address_inputs> &inputs) {
    this->inputs = inputs;
    this->m_inputs_isSet = true;
}

qint32
OAIInline_response_200_2::getFee() const {
    return fee;
}
void
OAIInline_response_200_2::setFee(const qint32 &fee) {
    this->fee = fee;
    this->m_fee_isSet = true;
}

QList<QString>
OAIInline_response_200_2::getSigs() const {
    return sigs;
}
void
OAIInline_response_200_2::setSigs(const QList<QString> &sigs) {
    this->sigs = sigs;
    this->m_sigs_isSet = true;
}

qint64
OAIInline_response_200_2::getLength() const {
    return length;
}
void
OAIInline_response_200_2::setLength(const qint64 &length) {
    this->length = length;
    this->m_length_isSet = true;
}

QString
OAIInline_response_200_2::getTxid() const {
    return txid;
}
void
OAIInline_response_200_2::setTxid(const QString &txid) {
    this->txid = txid;
    this->m_txid_isSet = true;
}

qint32
OAIInline_response_200_2::getType() const {
    return type;
}
void
OAIInline_response_200_2::setType(const qint32 &type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAI_api_v1_explorer_address_status
OAIInline_response_200_2::getStatus() const {
    return status;
}
void
OAIInline_response_200_2::setStatus(const OAI_api_v1_explorer_address_status &status) {
    this->status = status;
    this->m_status_isSet = true;
}

qint32
OAIInline_response_200_2::getTimestamp() const {
    return timestamp;
}
void
OAIInline_response_200_2::setTimestamp(const qint32 &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

bool
OAIInline_response_200_2::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(outputs.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_inner_hash_isSet){ isObjectUpdated = true; break;}
    
        if(inputs.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_fee_isSet){ isObjectUpdated = true; break;}
    
        if(sigs.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_length_isSet){ isObjectUpdated = true; break;}
    
        if(m_txid_isSet){ isObjectUpdated = true; break;}
    
        if(m_type_isSet){ isObjectUpdated = true; break;}
    
        if(status.isSet()){ isObjectUpdated = true; break;}
    
        if(m_timestamp_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

