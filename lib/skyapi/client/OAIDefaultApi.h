/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHttpRequest.h"

#include "OAIInline_object.h"
#include "OAIInline_response_200.h"
#include "OAIInline_response_200_1.h"
#include "OAIInline_response_200_2.h"
#include "OAIInline_response_200_3.h"
#include "OAIInline_response_200_4.h"
#include "OAIInline_response_200_5.h"
#include "OAIInline_response_200_6.h"
#include "OAIInline_response_200_7.h"
#include "OAIInline_response_default.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>

namespace skyqt {

class OAIDefaultApi: public QObject {
    Q_OBJECT

public:
    OAIDefaultApi();
    OAIDefaultApi(QString host, QString basePath);
    ~OAIDefaultApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void addressCount();
    void addressUxouts(const QString& address);
    void balanceGet(const QString& addrs);
    void balancePost(const QString& addrs);
    void block(const QString& hash, const qint32& seq);
    void blockchainMetadata();
    void blockchainProgress();
    void blocksGet(const qint32& start, const qint32& end, const QList<qint32>& seqs);
    void blocksPost(const qint32& start, const qint32& end, const QList<qint32>& seqs);
    void coinSupply();
    void csrf();
    void defaultConnections();
    void explorerAddress(const QString& address);
    void health();
    void lastBlocks(const qint32& num);
    void networkConnection(const QString& addr);
    void networkConnections(const QString& states, const QString& direction);
    void networkConnectionsDisconnect(const QString& id);
    void networkConnectionsExchange();
    void networkConnectionsTrust();
    void outputsGet(const QList<QString>& address, const QList<QString>& hash);
    void outputsPost(const QString& address, const QString& hash);
    void pendingTxs();
    void resendUnconfirmedTxns();
    void richlist(const bool& include_distribution, const QString& n);
    void transaction(const QString& txid, const bool& encoded);
    void transactionInject(const QString& rawtx);
    void transactionRaw(const QString& txid);
    void transactionVerify();
    void transactionsGet(const QString& addrs, const QString& confirmed);
    void transactionsPost(const QString& addrs, const QString& confirmed);
    void uxout(const QString& uxid);
    void verifyAddress(const QString& address);
    void version();
    void wallet(const QString& id);
    void walletBalance(const QString& id);
    void walletCreate(const QString& seed, const QString& label, const qint32& scan, const bool& encrypt, const QString& password);
    void walletDecrypt(const QString& id, const QString& password);
    void walletEncrypt(const QString& id, const QString& password);
    void walletFolder(const QString& addr);
    void walletNewAddress(const QString& id, const QString& num, const QString& password);
    void walletNewSeed(const QString& entropy);
    void walletRecover(const QString& id, const QString& seed, const QString& password);
    void walletSeed(const QString& id, const QString& password);
    void walletSeedVerify(const QString& seed);
    void walletSpent(const QString& id, const QString& dst, const QString& coins, const QString& password);
    void walletTransaction(const OAIInline_object& body);
    void walletTransactions(const QString& id);
    void walletUnload(const QString& id);
    void walletUpdate(const QString& id, const QString& label);
    void wallets();
    
private:
    void addressCountCallback (OAIHttpRequestWorker * worker);
    void addressUxoutsCallback (OAIHttpRequestWorker * worker);
    void balanceGetCallback (OAIHttpRequestWorker * worker);
    void balancePostCallback (OAIHttpRequestWorker * worker);
    void blockCallback (OAIHttpRequestWorker * worker);
    void blockchainMetadataCallback (OAIHttpRequestWorker * worker);
    void blockchainProgressCallback (OAIHttpRequestWorker * worker);
    void blocksGetCallback (OAIHttpRequestWorker * worker);
    void blocksPostCallback (OAIHttpRequestWorker * worker);
    void coinSupplyCallback (OAIHttpRequestWorker * worker);
    void csrfCallback (OAIHttpRequestWorker * worker);
    void defaultConnectionsCallback (OAIHttpRequestWorker * worker);
    void explorerAddressCallback (OAIHttpRequestWorker * worker);
    void healthCallback (OAIHttpRequestWorker * worker);
    void lastBlocksCallback (OAIHttpRequestWorker * worker);
    void networkConnectionCallback (OAIHttpRequestWorker * worker);
    void networkConnectionsCallback (OAIHttpRequestWorker * worker);
    void networkConnectionsDisconnectCallback (OAIHttpRequestWorker * worker);
    void networkConnectionsExchangeCallback (OAIHttpRequestWorker * worker);
    void networkConnectionsTrustCallback (OAIHttpRequestWorker * worker);
    void outputsGetCallback (OAIHttpRequestWorker * worker);
    void outputsPostCallback (OAIHttpRequestWorker * worker);
    void pendingTxsCallback (OAIHttpRequestWorker * worker);
    void resendUnconfirmedTxnsCallback (OAIHttpRequestWorker * worker);
    void richlistCallback (OAIHttpRequestWorker * worker);
    void transactionCallback (OAIHttpRequestWorker * worker);
    void transactionInjectCallback (OAIHttpRequestWorker * worker);
    void transactionRawCallback (OAIHttpRequestWorker * worker);
    void transactionVerifyCallback (OAIHttpRequestWorker * worker);
    void transactionsGetCallback (OAIHttpRequestWorker * worker);
    void transactionsPostCallback (OAIHttpRequestWorker * worker);
    void uxoutCallback (OAIHttpRequestWorker * worker);
    void verifyAddressCallback (OAIHttpRequestWorker * worker);
    void versionCallback (OAIHttpRequestWorker * worker);
    void walletCallback (OAIHttpRequestWorker * worker);
    void walletBalanceCallback (OAIHttpRequestWorker * worker);
    void walletCreateCallback (OAIHttpRequestWorker * worker);
    void walletDecryptCallback (OAIHttpRequestWorker * worker);
    void walletEncryptCallback (OAIHttpRequestWorker * worker);
    void walletFolderCallback (OAIHttpRequestWorker * worker);
    void walletNewAddressCallback (OAIHttpRequestWorker * worker);
    void walletNewSeedCallback (OAIHttpRequestWorker * worker);
    void walletRecoverCallback (OAIHttpRequestWorker * worker);
    void walletSeedCallback (OAIHttpRequestWorker * worker);
    void walletSeedVerifyCallback (OAIHttpRequestWorker * worker);
    void walletSpentCallback (OAIHttpRequestWorker * worker);
    void walletTransactionCallback (OAIHttpRequestWorker * worker);
    void walletTransactionsCallback (OAIHttpRequestWorker * worker);
    void walletUnloadCallback (OAIHttpRequestWorker * worker);
    void walletUpdateCallback (OAIHttpRequestWorker * worker);
    void walletsCallback (OAIHttpRequestWorker * worker);
    
signals:
    void addressCountSignal(OAIObject summary);
    void addressUxoutsSignal(QList<OAIInline_response_200> summary);
    void balanceGetSignal(OAIObject summary);
    void balancePostSignal(OAIObject summary);
    void blockSignal(OAIObject summary);
    void blockchainMetadataSignal(OAIObject summary);
    void blockchainProgressSignal(OAIObject summary);
    void blocksGetSignal(OAIObject summary);
    void blocksPostSignal(OAIObject summary);
    void coinSupplySignal();
    void csrfSignal(OAIInline_response_200_1 summary);
    void defaultConnectionsSignal(QList<QString> summary);
    void explorerAddressSignal(QList<OAIInline_response_200_2> summary);
    void healthSignal(OAIObject summary);
    void lastBlocksSignal(OAIObject summary);
    void networkConnectionSignal(OAIInline_response_200_3 summary);
    void networkConnectionsSignal(QList<OAIInline_response_200_3> summary);
    void networkConnectionsDisconnectSignal();
    void networkConnectionsExchangeSignal(QList<QString> summary);
    void networkConnectionsTrustSignal(QList<QString> summary);
    void outputsGetSignal(OAIObject summary);
    void outputsPostSignal(OAIObject summary);
    void pendingTxsSignal(QList<OAIInline_response_200_4> summary);
    void resendUnconfirmedTxnsSignal();
    void richlistSignal(OAIObject summary);
    void transactionSignal(OAIObject summary);
    void transactionInjectSignal(OAIObject summary);
    void transactionRawSignal(OAIObject summary);
    void transactionVerifySignal(OAIObject summary);
    void transactionsGetSignal(OAIObject summary);
    void transactionsPostSignal(OAIObject summary);
    void uxoutSignal(OAIObject summary);
    void verifyAddressSignal(OAIInline_response_200_7 summary);
    void versionSignal();
    void walletSignal(OAIObject summary);
    void walletBalanceSignal(OAIObject summary);
    void walletCreateSignal(OAIObject summary);
    void walletDecryptSignal(OAIObject summary);
    void walletEncryptSignal(OAIObject summary);
    void walletFolderSignal(OAIInline_response_200_6 summary);
    void walletNewAddressSignal(OAIObject summary);
    void walletNewSeedSignal(OAIObject summary);
    void walletRecoverSignal(OAIObject summary);
    void walletSeedSignal(OAIObject summary);
    void walletSeedVerifySignal(OAIObject summary);
    void walletSpentSignal(OAIObject summary);
    void walletTransactionSignal(OAIObject summary);
    void walletTransactionsSignal(OAIObject summary);
    void walletUnloadSignal();
    void walletUpdateSignal();
    void walletsSignal(QList<OAIInline_response_200_5> summary);
    
    void addressCountSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void addressUxoutsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200> summary);
    void balanceGetSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void balancePostSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void blockSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void blockchainMetadataSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void blockchainProgressSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void blocksGetSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void blocksPostSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void coinSupplySignalFull(OAIHttpRequestWorker* worker);
    void csrfSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_1 summary);
    void defaultConnectionsSignalFull(OAIHttpRequestWorker* worker, QList<QString> summary);
    void explorerAddressSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_2> summary);
    void healthSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void lastBlocksSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void networkConnectionSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_3 summary);
    void networkConnectionsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_3> summary);
    void networkConnectionsDisconnectSignalFull(OAIHttpRequestWorker* worker);
    void networkConnectionsExchangeSignalFull(OAIHttpRequestWorker* worker, QList<QString> summary);
    void networkConnectionsTrustSignalFull(OAIHttpRequestWorker* worker, QList<QString> summary);
    void outputsGetSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void outputsPostSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void pendingTxsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_4> summary);
    void resendUnconfirmedTxnsSignalFull(OAIHttpRequestWorker* worker);
    void richlistSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void transactionSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void transactionInjectSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void transactionRawSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void transactionVerifySignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void transactionsGetSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void transactionsPostSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void uxoutSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void verifyAddressSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_7 summary);
    void versionSignalFull(OAIHttpRequestWorker* worker);
    void walletSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletBalanceSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletCreateSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletDecryptSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletEncryptSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletFolderSignalFull(OAIHttpRequestWorker* worker, OAIInline_response_200_6 summary);
    void walletNewAddressSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletNewSeedSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletRecoverSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletSeedSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletSeedVerifySignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletSpentSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletTransactionSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletTransactionsSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void walletUnloadSignalFull(OAIHttpRequestWorker* worker);
    void walletUpdateSignalFull(OAIHttpRequestWorker* worker);
    void walletsSignalFull(OAIHttpRequestWorker* worker, QList<OAIInline_response_200_5> summary);
    
    void addressCountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void addressUxoutsSignalE(QList<OAIInline_response_200> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void balanceGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void balancePostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void blockSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void blockchainMetadataSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void blockchainProgressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void blocksGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void blocksPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void coinSupplySignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void csrfSignalE(OAIInline_response_200_1 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void defaultConnectionsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void explorerAddressSignalE(QList<OAIInline_response_200_2> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void healthSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void lastBlocksSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionSignalE(OAIInline_response_200_3 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsSignalE(QList<OAIInline_response_200_3> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsDisconnectSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsExchangeSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsTrustSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void outputsGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void outputsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void pendingTxsSignalE(QList<OAIInline_response_200_4> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void resendUnconfirmedTxnsSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void richlistSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionInjectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionRawSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionVerifySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionsGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void uxoutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void verifyAddressSignalE(OAIInline_response_200_7 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void versionSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletBalanceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletCreateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletDecryptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletEncryptSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletFolderSignalE(OAIInline_response_200_6 summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletNewAddressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletNewSeedSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletRecoverSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSeedSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSeedVerifySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSpentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletTransactionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletTransactionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletUnloadSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void walletUpdateSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void walletsSignalE(QList<OAIInline_response_200_5> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void addressCountSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void addressUxoutsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void balanceGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void balancePostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void blockSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void blockchainMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void blockchainProgressSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void blocksGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void blocksPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void coinSupplySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void csrfSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void defaultConnectionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void explorerAddressSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void healthSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void lastBlocksSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsDisconnectSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsExchangeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void networkConnectionsTrustSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void outputsGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void outputsPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void pendingTxsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void resendUnconfirmedTxnsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void richlistSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionInjectSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionRawSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionVerifySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionsGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transactionsPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void uxoutSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void verifyAddressSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void versionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletBalanceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletCreateSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletDecryptSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletEncryptSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletFolderSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletNewAddressSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletNewSeedSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletRecoverSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSeedSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSeedVerifySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletSpentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletTransactionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletTransactionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletUnloadSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletUpdateSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void walletsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
