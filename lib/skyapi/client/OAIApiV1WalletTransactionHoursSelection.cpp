/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAI_api_v1_wallet_transaction_hours_selection.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAI_api_v1_wallet_transaction_hours_selection::OAI_api_v1_wallet_transaction_hours_selection(QString json) {
    this->init();
    this->fromJson(json);
}

OAI_api_v1_wallet_transaction_hours_selection::OAI_api_v1_wallet_transaction_hours_selection() {
    this->init();
}

OAI_api_v1_wallet_transaction_hours_selection::~OAI_api_v1_wallet_transaction_hours_selection() {

}

void
OAI_api_v1_wallet_transaction_hours_selection::init() {
    m_mode_isSet = false;
    m_mode_isValid = false;
    m_share_factor_isSet = false;
    m_share_factor_isValid = false;
    m_type_isSet = false;
    m_type_isValid = false;
}

void
OAI_api_v1_wallet_transaction_hours_selection::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAI_api_v1_wallet_transaction_hours_selection::fromJsonObject(QJsonObject json) {
    m_mode_isValid = ::skyqt::fromJsonValue(mode, json[QString("mode")]);
    
    m_share_factor_isValid = ::skyqt::fromJsonValue(share_factor, json[QString("share_factor")]);
    
    m_type_isValid = ::skyqt::fromJsonValue(type, json[QString("type")]);
    
}

QString
OAI_api_v1_wallet_transaction_hours_selection::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAI_api_v1_wallet_transaction_hours_selection::asJsonObject() const {
    QJsonObject obj;
	if(m_mode_isSet){
        obj.insert(QString("mode"), ::skyqt::toJsonValue(mode));
    }
	if(m_share_factor_isSet){
        obj.insert(QString("share_factor"), ::skyqt::toJsonValue(share_factor));
    }
	if(m_type_isSet){
        obj.insert(QString("type"), ::skyqt::toJsonValue(type));
    }
    return obj;
}

QString
OAI_api_v1_wallet_transaction_hours_selection::getMode() const {
    return mode;
}
void
OAI_api_v1_wallet_transaction_hours_selection::setMode(const QString &mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

QString
OAI_api_v1_wallet_transaction_hours_selection::getShareFactor() const {
    return share_factor;
}
void
OAI_api_v1_wallet_transaction_hours_selection::setShareFactor(const QString &share_factor) {
    this->share_factor = share_factor;
    this->m_share_factor_isSet = true;
}

QString
OAI_api_v1_wallet_transaction_hours_selection::getType() const {
    return type;
}
void
OAI_api_v1_wallet_transaction_hours_selection::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool
OAI_api_v1_wallet_transaction_hours_selection::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_mode_isSet){ isObjectUpdated = true; break;}
    
        if(m_share_factor_isSet){ isObjectUpdated = true; break;}
    
        if(m_type_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAI_api_v1_wallet_transaction_hours_selection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

