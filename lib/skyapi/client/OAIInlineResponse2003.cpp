/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInline_response_200_3.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAIInline_response_200_3::OAIInline_response_200_3(QString json) {
    this->init();
    this->fromJson(json);
}

OAIInline_response_200_3::OAIInline_response_200_3() {
    this->init();
}

OAIInline_response_200_3::~OAIInline_response_200_3() {

}

void
OAIInline_response_200_3::init() {
    m_last_received_isSet = false;
    m_last_received_isValid = false;
    m_last_sent_isSet = false;
    m_last_sent_isValid = false;
    m_outgoing_isSet = false;
    m_outgoing_isValid = false;
    m_mirror_isSet = false;
    m_mirror_isValid = false;
    m_address_isSet = false;
    m_address_isValid = false;
    m_listen_port_isSet = false;
    m_listen_port_isValid = false;
    m_is_trusted_peer_isSet = false;
    m_is_trusted_peer_isValid = false;
    m_connected_at_isSet = false;
    m_connected_at_isValid = false;
    m_unconfirmed_verify_transaction_isSet = false;
    m_unconfirmed_verify_transaction_isValid = false;
    m_id_isSet = false;
    m_id_isValid = false;
    m_state_isSet = false;
    m_state_isValid = false;
    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
    m_height_isSet = false;
    m_height_isValid = false;
}

void
OAIInline_response_200_3::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInline_response_200_3::fromJsonObject(QJsonObject json) {
    m_last_received_isValid = ::skyqt::fromJsonValue(last_received, json[QString("last_received")]);
    
    m_last_sent_isValid = ::skyqt::fromJsonValue(last_sent, json[QString("last_sent")]);
    
    m_outgoing_isValid = ::skyqt::fromJsonValue(outgoing, json[QString("outgoing")]);
    
    m_mirror_isValid = ::skyqt::fromJsonValue(mirror, json[QString("mirror")]);
    
    m_address_isValid = ::skyqt::fromJsonValue(address, json[QString("address")]);
    
    m_listen_port_isValid = ::skyqt::fromJsonValue(listen_port, json[QString("listen_port")]);
    
    m_is_trusted_peer_isValid = ::skyqt::fromJsonValue(is_trusted_peer, json[QString("is_trusted_peer")]);
    
    m_connected_at_isValid = ::skyqt::fromJsonValue(connected_at, json[QString("connected_at")]);
    
    m_unconfirmed_verify_transaction_isValid = ::skyqt::fromJsonValue(unconfirmed_verify_transaction, json[QString("unconfirmed_verify_transaction")]);
    
    m_id_isValid = ::skyqt::fromJsonValue(id, json[QString("id")]);
    
    m_state_isValid = ::skyqt::fromJsonValue(state, json[QString("state")]);
    
    m_user_agent_isValid = ::skyqt::fromJsonValue(user_agent, json[QString("user_agent")]);
    
    m_height_isValid = ::skyqt::fromJsonValue(height, json[QString("height")]);
    
}

QString
OAIInline_response_200_3::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInline_response_200_3::asJsonObject() const {
    QJsonObject obj;
	if(m_last_received_isSet){
        obj.insert(QString("last_received"), ::skyqt::toJsonValue(last_received));
    }
	if(m_last_sent_isSet){
        obj.insert(QString("last_sent"), ::skyqt::toJsonValue(last_sent));
    }
	if(m_outgoing_isSet){
        obj.insert(QString("outgoing"), ::skyqt::toJsonValue(outgoing));
    }
	if(m_mirror_isSet){
        obj.insert(QString("mirror"), ::skyqt::toJsonValue(mirror));
    }
	if(m_address_isSet){
        obj.insert(QString("address"), ::skyqt::toJsonValue(address));
    }
	if(m_listen_port_isSet){
        obj.insert(QString("listen_port"), ::skyqt::toJsonValue(listen_port));
    }
	if(m_is_trusted_peer_isSet){
        obj.insert(QString("is_trusted_peer"), ::skyqt::toJsonValue(is_trusted_peer));
    }
	if(m_connected_at_isSet){
        obj.insert(QString("connected_at"), ::skyqt::toJsonValue(connected_at));
    }
	if(unconfirmed_verify_transaction.isSet()){
        obj.insert(QString("unconfirmed_verify_transaction"), ::skyqt::toJsonValue(unconfirmed_verify_transaction));
    }
	if(m_id_isSet){
        obj.insert(QString("id"), ::skyqt::toJsonValue(id));
    }
	if(m_state_isSet){
        obj.insert(QString("state"), ::skyqt::toJsonValue(state));
    }
	if(m_user_agent_isSet){
        obj.insert(QString("user_agent"), ::skyqt::toJsonValue(user_agent));
    }
	if(m_height_isSet){
        obj.insert(QString("height"), ::skyqt::toJsonValue(height));
    }
    return obj;
}

qint64
OAIInline_response_200_3::getLastReceived() const {
    return last_received;
}
void
OAIInline_response_200_3::setLastReceived(const qint64 &last_received) {
    this->last_received = last_received;
    this->m_last_received_isSet = true;
}

qint64
OAIInline_response_200_3::getLastSent() const {
    return last_sent;
}
void
OAIInline_response_200_3::setLastSent(const qint64 &last_sent) {
    this->last_sent = last_sent;
    this->m_last_sent_isSet = true;
}

bool
OAIInline_response_200_3::isOutgoing() const {
    return outgoing;
}
void
OAIInline_response_200_3::setOutgoing(const bool &outgoing) {
    this->outgoing = outgoing;
    this->m_outgoing_isSet = true;
}

qint32
OAIInline_response_200_3::getMirror() const {
    return mirror;
}
void
OAIInline_response_200_3::setMirror(const qint32 &mirror) {
    this->mirror = mirror;
    this->m_mirror_isSet = true;
}

QString
OAIInline_response_200_3::getAddress() const {
    return address;
}
void
OAIInline_response_200_3::setAddress(const QString &address) {
    this->address = address;
    this->m_address_isSet = true;
}

qint32
OAIInline_response_200_3::getListenPort() const {
    return listen_port;
}
void
OAIInline_response_200_3::setListenPort(const qint32 &listen_port) {
    this->listen_port = listen_port;
    this->m_listen_port_isSet = true;
}

bool
OAIInline_response_200_3::isIsTrustedPeer() const {
    return is_trusted_peer;
}
void
OAIInline_response_200_3::setIsTrustedPeer(const bool &is_trusted_peer) {
    this->is_trusted_peer = is_trusted_peer;
    this->m_is_trusted_peer_isSet = true;
}

qint64
OAIInline_response_200_3::getConnectedAt() const {
    return connected_at;
}
void
OAIInline_response_200_3::setConnectedAt(const qint64 &connected_at) {
    this->connected_at = connected_at;
    this->m_connected_at_isSet = true;
}

OAIInline_response_200_3_unconfirmed_verify_transaction
OAIInline_response_200_3::getUnconfirmedVerifyTransaction() const {
    return unconfirmed_verify_transaction;
}
void
OAIInline_response_200_3::setUnconfirmedVerifyTransaction(const OAIInline_response_200_3_unconfirmed_verify_transaction &unconfirmed_verify_transaction) {
    this->unconfirmed_verify_transaction = unconfirmed_verify_transaction;
    this->m_unconfirmed_verify_transaction_isSet = true;
}

qint64
OAIInline_response_200_3::getId() const {
    return id;
}
void
OAIInline_response_200_3::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString
OAIInline_response_200_3::getState() const {
    return state;
}
void
OAIInline_response_200_3::setState(const QString &state) {
    this->state = state;
    this->m_state_isSet = true;
}

QString
OAIInline_response_200_3::getUserAgent() const {
    return user_agent;
}
void
OAIInline_response_200_3::setUserAgent(const QString &user_agent) {
    this->user_agent = user_agent;
    this->m_user_agent_isSet = true;
}

qint64
OAIInline_response_200_3::getHeight() const {
    return height;
}
void
OAIInline_response_200_3::setHeight(const qint64 &height) {
    this->height = height;
    this->m_height_isSet = true;
}

bool
OAIInline_response_200_3::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_last_received_isSet){ isObjectUpdated = true; break;}
    
        if(m_last_sent_isSet){ isObjectUpdated = true; break;}
    
        if(m_outgoing_isSet){ isObjectUpdated = true; break;}
    
        if(m_mirror_isSet){ isObjectUpdated = true; break;}
    
        if(m_address_isSet){ isObjectUpdated = true; break;}
    
        if(m_listen_port_isSet){ isObjectUpdated = true; break;}
    
        if(m_is_trusted_peer_isSet){ isObjectUpdated = true; break;}
    
        if(m_connected_at_isSet){ isObjectUpdated = true; break;}
    
        if(unconfirmed_verify_transaction.isSet()){ isObjectUpdated = true; break;}
    
        if(m_id_isSet){ isObjectUpdated = true; break;}
    
        if(m_state_isSet){ isObjectUpdated = true; break;}
    
        if(m_user_agent_isSet){ isObjectUpdated = true; break;}
    
        if(m_height_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIInline_response_200_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

