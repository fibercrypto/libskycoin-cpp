/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAI_api_v1_explorer_address_inputs.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace skyqt {

OAI_api_v1_explorer_address_inputs::OAI_api_v1_explorer_address_inputs(QString json) {
    this->init();
    this->fromJson(json);
}

OAI_api_v1_explorer_address_inputs::OAI_api_v1_explorer_address_inputs() {
    this->init();
}

OAI_api_v1_explorer_address_inputs::~OAI_api_v1_explorer_address_inputs() {

}

void
OAI_api_v1_explorer_address_inputs::init() {
    m_owner_isSet = false;
    m_owner_isValid = false;
    m_hours_isSet = false;
    m_hours_isValid = false;
    m_calculated_hours_isSet = false;
    m_calculated_hours_isValid = false;
    m_coins_isSet = false;
    m_coins_isValid = false;
    m_uxid_isSet = false;
    m_uxid_isValid = false;
}

void
OAI_api_v1_explorer_address_inputs::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAI_api_v1_explorer_address_inputs::fromJsonObject(QJsonObject json) {
    m_owner_isValid = ::skyqt::fromJsonValue(owner, json[QString("owner")]);
    
    m_hours_isValid = ::skyqt::fromJsonValue(hours, json[QString("hours")]);
    
    m_calculated_hours_isValid = ::skyqt::fromJsonValue(calculated_hours, json[QString("calculated_hours")]);
    
    m_coins_isValid = ::skyqt::fromJsonValue(coins, json[QString("coins")]);
    
    m_uxid_isValid = ::skyqt::fromJsonValue(uxid, json[QString("uxid")]);
    
}

QString
OAI_api_v1_explorer_address_inputs::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAI_api_v1_explorer_address_inputs::asJsonObject() const {
    QJsonObject obj;
	if(m_owner_isSet){
        obj.insert(QString("owner"), ::skyqt::toJsonValue(owner));
    }
	if(m_hours_isSet){
        obj.insert(QString("hours"), ::skyqt::toJsonValue(hours));
    }
	if(m_calculated_hours_isSet){
        obj.insert(QString("calculated_hours"), ::skyqt::toJsonValue(calculated_hours));
    }
	if(m_coins_isSet){
        obj.insert(QString("coins"), ::skyqt::toJsonValue(coins));
    }
	if(m_uxid_isSet){
        obj.insert(QString("uxid"), ::skyqt::toJsonValue(uxid));
    }
    return obj;
}

QString
OAI_api_v1_explorer_address_inputs::getOwner() const {
    return owner;
}
void
OAI_api_v1_explorer_address_inputs::setOwner(const QString &owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

qint64
OAI_api_v1_explorer_address_inputs::getHours() const {
    return hours;
}
void
OAI_api_v1_explorer_address_inputs::setHours(const qint64 &hours) {
    this->hours = hours;
    this->m_hours_isSet = true;
}

qint64
OAI_api_v1_explorer_address_inputs::getCalculatedHours() const {
    return calculated_hours;
}
void
OAI_api_v1_explorer_address_inputs::setCalculatedHours(const qint64 &calculated_hours) {
    this->calculated_hours = calculated_hours;
    this->m_calculated_hours_isSet = true;
}

QString
OAI_api_v1_explorer_address_inputs::getCoins() const {
    return coins;
}
void
OAI_api_v1_explorer_address_inputs::setCoins(const QString &coins) {
    this->coins = coins;
    this->m_coins_isSet = true;
}

QString
OAI_api_v1_explorer_address_inputs::getUxid() const {
    return uxid;
}
void
OAI_api_v1_explorer_address_inputs::setUxid(const QString &uxid) {
    this->uxid = uxid;
    this->m_uxid_isSet = true;
}

bool
OAI_api_v1_explorer_address_inputs::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_owner_isSet){ isObjectUpdated = true; break;}
    
        if(m_hours_isSet){ isObjectUpdated = true; break;}
    
        if(m_calculated_hours_isSet){ isObjectUpdated = true; break;}
    
        if(m_coins_isSet){ isObjectUpdated = true; break;}
    
        if(m_uxid_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAI_api_v1_explorer_address_inputs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

